'use client';

import { cn } from '@/lib/utils';
import { zodResolver } from '@hookform/resolvers/zod';
import {
	ChevronDown,
	ChevronUp,
	Loader2,
	RotateCw,
	Search,
} from 'lucide-react';
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { Document, Page, pdfjs } from 'react-pdf';
import 'react-pdf/dist/Page/AnnotationLayer.css';
import 'react-pdf/dist/Page/TextLayer.css';
import { useResizeDetector } from 'react-resize-detector';
import { z } from 'zod';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { useToast } from './ui/use-toast';
import {
	DropdownMenu,
	DropdownMenuContent,
	DropdownMenuItem,
	DropdownMenuTrigger,
} from './ui/dropdown-menu';
import SimpleBar from 'simplebar-react';
import PdfFullScreeen from './PdfFullScreen';

pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;

interface PdfRendererProps {
	url: string;
}

const PdfRenderer = ({ url }: PdfRendererProps) => {
	const { toast } = useToast();

	const [numPages, setNumPages] = useState<number>();
	const [curPage, setCurPage] = useState<number>(1);
	const [scale, setScale] = useState<number>(1);
	const [rotation, setRotation] = useState<number>(0);
	const [renderedScale, setRenderedScale] = useState<number | null>(null);

	const isLoading = renderedScale !== scale;

	const CustomPageValidator = z.object({
		page: z.string().refine((num) => {
			Number(num) > 0 && Number(num) <= numPages!;
		}),
	});

	type TCustomPageValidator = z.infer<typeof CustomPageValidator>;

	const {
		register,
		handleSubmit,
		formState: { errors },
		setValue,
	} = useForm<TCustomPageValidator>({
		defaultValues: {
			page: '1',
		},
		resolver: zodResolver(CustomPageValidator),
	});

	const handlePageSubmit = ({ page }: TCustomPageValidator) => {
		setCurPage(Number(page));
	};

	const { width, ref } = useResizeDetector();

	return (
		<div className='w-full bg-white rounded-md shadow flex flex-col items-center'>
			<div className='h-14 w-full border-b border-zinc-200 flex items-center justify-between px-2 '>
				<div className='flex items-center gap-1.5'>
					<Button
						aria-label='previous-page'
						disabled={curPage <= 1}
						variant='ghost'
						onClick={() => {
							setCurPage((prev) => (prev - 1 > 1 ? prev - 1 : 1));
							setValue('page', String(curPage - 1));
						}}
					>
						<ChevronDown className='size-4' />
					</Button>

					<div className='flex items-center gap-1.5'>
						<Input
							{...register('page')}
							onKeyDown={(e) => {
								if (e.key === 'Enter') {
									handleSubmit(handlePageSubmit)();
								}
							}}
							className={cn(
								'w-12 h-8',
								errors.page && 'focus-visible:ring-red-500'
							)}
						/>
						<p className='text-zinc-700 text-sm space-x-1'>
							<span>/</span>
							<span>{numPages ?? 'x'}</span>
						</p>
					</div>
					<Button
						disabled={
							numPages === undefined || curPage === numPages
						}
						aria-label='Next-page'
						variant='ghost'
						onClick={() => {
							setCurPage((prev) =>
								prev + 1 > numPages! ? numPages! : prev + 1
							);
							setValue('page', String(curPage + 1));
						}}
					>
						<ChevronUp className='size-4' />
					</Button>
				</div>
				<div className='space-x-2'>
					<DropdownMenu>
						<DropdownMenuTrigger asChild>
							<Button variant='ghost' className='gap-1.5'>
								<Search className='size-4' />
								{scale * 100}%
								<ChevronDown className='size-3 opacity-50' />
							</Button>
						</DropdownMenuTrigger>
						<DropdownMenuContent>
							<DropdownMenuItem onSelect={() => setScale(0.5)}>
								50%
							</DropdownMenuItem>
							<DropdownMenuItem onSelect={() => setScale(0.75)}>
								75%
							</DropdownMenuItem>
							<DropdownMenuItem onSelect={() => setScale(1)}>
								100%
							</DropdownMenuItem>
							<DropdownMenuItem onSelect={() => setScale(1.5)}>
								150%
							</DropdownMenuItem>
							<DropdownMenuItem onSelect={() => setScale(2)}>
								200%
							</DropdownMenuItem>
						</DropdownMenuContent>
					</DropdownMenu>
					<Button
						onClick={() => setRotation((prev) => prev + 90)}
						aria-label='rotate 90 degrees'
						variant='ghost'
					>
						<RotateCw className='size-4' />
					</Button>

					<PdfFullScreeen fileUrl={url} />
				</div>
			</div>
			<div className='flex-1 w-full max-h-screen'>
				<SimpleBar
					autoHide={false}
					className='max-h-[calc(100vh-10rem)]'
				>
					<div
						ref={ref}
						className={cn(scale < 1 ? 'flex justify-center' : '')}
					>
						<Document
							file={url}
							className='max-h-full'
							loading={
								<div className='flex justify-center'>
									<Loader2 className='my-24 size-6 animate-spin' />
								</div>
							}
							onLoadError={() => {
								toast({
									title: 'Error loading PDF',
									description: 'Please try again later',
									variant: 'destructive',
								});
							}}
							onLoadSuccess={({ numPages }) => {
								setNumPages(numPages);
							}}
						>
							{isLoading && renderedScale ? (
								<Page
									pageNumber={curPage}
									width={width ? width : 1}
									scale={scale}
									rotate={rotation}
								/>
							) : null}
							<Page
								className={cn(isLoading ? 'hidden' : '')}
								pageNumber={curPage}
								width={width ? width : 1}
								scale={scale}
								rotate={rotation}
								loading={
									<div className='flex justify-center'>
										<Loader2 className='my-24 size-6 animate-spin' />
									</div>
								}
								onRenderSuccess={() => setRenderedScale(scale)}
							/>
						</Document>
					</div>
				</SimpleBar>
			</div>
		</div>
	);
};

export default PdfRenderer;
